//Получает метрики при обращении Prometheus по HTTP сервису
Функция ПолучитьМетрикиPULL() Экспорт
	
	//Получить предварительно рассчитанные метрики
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	prРассчитанныеМетрики.Метрика
	|ИЗ
	|	РегистрСведений.prРассчитанныеМетрики КАК prРассчитанныеМетрики
	|ГДЕ
	|	prРассчитанныеМетрики.ГраницаАктуальности >= &ГраницаАктуальности";
	Запрос.УстановитьПараметр("ГраницаАктуальности", ТекущаяДата());
	
	ВыборкаМетрик = Запрос.Выполнить().Выбрать();
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Пока ВыборкаМетрик.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.prРассчитанныеМетрики.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Метрика = ВыборкаМетрик.Метрика;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьБезОбработки(МенеджерЗаписи.Результат);
				
	КонецЦикла; 
	
	//Рассчитать метрики на лету
	Запрос.Текст = "ВЫБРАТЬ
	               |	prМетрики.Ссылка,
	               |	prМетрики.ТипМетрики,
	               |	prМетрики.ИмяМетрики,
	               |	prМетрики.АлгоритмПолучения,
	               |	prМетрики.СрокДействияПредварительногоРасчета
	               |ИЗ
	               |	Справочник.prМетрики КАК prМетрики
	               |ГДЕ
	               |	НЕ prМетрики.ПометкаУдаления
	               |	И НЕ prМетрики.ИспользоватьПредварительныйРасчет
	               |	И prМетрики.ТипДоставкиМетрики = ЗНАЧЕНИЕ(Перечисление.prСпособыДоставкиМетрик.pull)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МетрикаТаблицейЗначений = ВыполнитьАлгоритмРасчетаМетрики(Результат.АлгоритмПолучения);		
		МетрикаСтрокой = ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Результат.ИмяМетрики, Результат.ТипМетрики, МетрикаТаблицейЗначений);
		ЗаписьJSON.ЗаписатьБезОбработки(МетрикаСтрокой);
		
	КонецЦикла;
	
	Возврат ЗаписьJSON.Закрыть();
		
КонецФункции

//Отправляет метрики в Pushgateway Prometheus
Процедура ОтправитьМетрикиPUSH() Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	prМетрики.Ссылка,
	               |	prМетрики.ТипМетрики,
	               |	prМетрики.ИмяМетрики,
	               |	prМетрики.АлгоритмПолучения,
	               |	prМетрики.СрокДействияПредварительногоРасчета
	               |ИЗ
	               |	Справочник.prМетрики КАК prМетрики
	               |ГДЕ
	               |	НЕ prМетрики.ПометкаУдаления
	               |	И prМетрики.ТипДоставкиМетрики = ЗНАЧЕНИЕ(Перечисление.prСпособыДоставкиМетрик.push)";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МетрикаТаблицейЗначений = ВыполнитьАлгоритмРасчетаМетрики(Результат.АлгоритмПолучения);		
		МетрикаСтрокой = ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(Результат.ИмяМетрики, Результат.ТипМетрики, МетрикаТаблицейЗначений);
		ЗаписьJSON.ЗаписатьБезОбработки(МетрикаСтрокой);
		
	КонецЦикла;
	
	Если Константы.prВыгружатьPullМетрикиПринудительно.Получить() Тогда
		ЗаписьJSON.ЗаписатьБезОбработки(ПолучитьМетрикиPULL());
	КонецЕсли;		
		
	ВыполнитьОтправкуМетодомPUSH(ЗаписьJSON.Закрыть());
	
КонецПроцедуры

//Старт регламентного задания расчета тяжелых метрик
Процедура ВыполнитьПредварительныйРасчетМетрикРегламентнымЗаданием() Экспорт
	    		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	prМетрики.Ссылка,
	               |	prМетрики.ТипМетрики,
	               |	prМетрики.ИмяМетрики,
	               |	prМетрики.АлгоритмПолучения,
	               |	prМетрики.СрокДействияПредварительногоРасчета
	               |ИЗ
	               |	Справочник.prМетрики КАК prМетрики
	               |ГДЕ
	               |	НЕ prМетрики.ПометкаУдаления
	               |	И prМетрики.ИспользоватьПредварительныйРасчет
	               |	И prМетрики.ТипДоставкиМетрики = ЗНАЧЕНИЕ(Перечисление.prСпособыДоставкиМетрик.pull)";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
		
	ВыборкаМетрик = Результат.Выбрать();
	
	Пока ВыборкаМетрик.Следующий() Цикл
				
		Параметры = Новый Массив;
		Параметры.Добавить(ВыборкаМетрик.ИмяМетрики);
		Параметры.Добавить(ВыборкаМетрик.ТипМетрики);
		Параметры.Добавить(ВыборкаМетрик.АлгоритмПолучения);
		Параметры.Добавить(ВыборкаМетрик.СрокДействияПредварительногоРасчета);
		
		КлючРасчетаМетрики = ВыборкаМетрик.Ссылка.УникальныйИдентификатор();
					
		ФоновыеЗадания.Выполнить("prРасчетМетрикPrometheusСервер.ВыполнитьПредварительныйРасчетМетрики",Параметры,КлючРасчетаМетрики);
						
	КонецЦикла; 
		
КонецПроцедуры

//Вызывается регламентным заданием для предварительного расчета тяжелых метрик
Процедура ВыполнитьПредварительныйРасчетМетрики(ИмяМетрики, ТипМетрики, АлгоритмПолучения, СрокДействияПредварительногоРасчета) Экспорт
	                                                                  	                                                                  	
	МетрикаТаблицейЗначений = ВыполнитьАлгоритмРасчетаМетрики(АлгоритмПолучения);
		
	МетрикаСтрокой = ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(ИмяМетрики, ТипМетрики, МетрикаТаблицейЗначений);
	
	ТекущаяДата = ТекущаяДата() + Секунда(СрокДействияПредварительногоРасчета) + Минута(СрокДействияПредварительногоРасчета) * 60 + Час(СрокДействияПредварительногоРасчета) * 3600;
	
	МенеджерЗаписи = РегистрыСведений.prРассчитанныеМетрики.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Метрика = ИмяМетрики;
	МенеджерЗаписи.Результат = МетрикаСтрокой;
	МенеджерЗаписи.ГраницаАктуальности = ТекущаяДата;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

//Непосредственное выполнение алгоритма расчета. Возврат - таблица расчета метрики.
Функция ВыполнитьАлгоритмРасчетаМетрики(АлгоритмПолучения, ОписаниеОшибки = Неопределено)
	     		
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Попытка
		Выполнить(АлгоритмПолучения);
	Исключение
		Если ОписаниеОшибки = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Расчет метрик Prometheus",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.prПредварительныйРасчетМетрик,
			,
			ОписаниеОшибки());
		Иначе
			ОписаниеОшибки = ОписаниеОшибки();
		КонецЕсли; 
	КонецПопытки;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

//Непосредственная отправка PUSH
Процедура ВыполнитьОтправкуМетодомPUSH(МетрикаСтрокой, АдресPushgateway = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(АдресPushgateway) Тогда
		АдресPushgateway = Константы.prАдресPushgateway.Получить();
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(АдресPushgateway) Тогда
		ЗаписьЖурналаРегистрации("Отправка метрик Prometheus методом PUSH",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегламентныеЗадания.prОтправитьМетрикиМетодомPUSH,
		,
		"Не указано расположения сервера Pushgateway Prometheus. Отправка методом PUSH невозможна");
	КонецЕсли;
	
	СтруктураURI = prРасчетМетрикPrometheusСервер.СтруктураURI(АдресPushgateway); 
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/plain; version=0.0.4");
		
	HTTPЗапрос.УстановитьТелоИзСтроки(МетрикаСтрокой,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = HTTPСоединение.ВызватьHTTPМетод("PUT",HTTPЗапрос);
	
	Если Результат.КодСостояния > 300 Тогда
		ЗаписьЖурналаРегистрации("Отправка метрик Prometheus методом PUSH",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегламентныеЗадания.prОтправитьМетрикиМетодомPUSH,
		,
		"Ошибка отправки метрик методом PUSH  - код ответа Pushgateway: " + Результат.КодСостояния);	
	КонецЕсли; 

КонецПроцедуры
	

//Форматирует таблицу значений с расчетами метрики в строку, понятную Prometheus
Функция ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(ИмяМетрики, ТипМетрики, МетрикаТаблицейЗначений) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ЗначениеЗаполнено(ТипМетрики) Тогда
		ЗаписьJSON.ЗаписатьБезОбработки("# TYPE ");
		ЗаписьJSON.ЗаписатьБезОбработки(ИмяМетрики);
		ЗаписьJSON.ЗаписатьБезОбработки(" ");
		ЗаписьJSON.ЗаписатьБезОбработки(Метаданные.Перечисления.prТипыМетрик.ЗначенияПеречисления[Перечисления.prТипыМетрик.Индекс(ТипМетрики)].Синоним);
		ЗаписьJSON.ЗаписатьБезОбработки(Символы.ПС);
	КонецЕсли; 
	
	Для Каждого Строка Из МетрикаТаблицейЗначений Цикл
		
		ЗаписьJSON.ЗаписатьБезОбработки(ИмяМетрики);
		ЗаписьJSON.ЗаписатьБезОбработки("{");

		ВыводительРазделитель = Неопределено;
		
		Для Каждого Колонка Из МетрикаТаблицейЗначений.Колонки Цикл
			Если Колонка.Имя = "ЗначениеМетрики" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыводительРазделитель = Истина Тогда
				ЗаписьJSON.ЗаписатьБезОбработки(", ");
			КонецЕсли;  
			
			ЗаписьJSON.ЗаписатьБезОбработки(Колонка.Имя);
			ЗаписьJSON.ЗаписатьБезОбработки("=""");
			ЗаписьJSON.ЗаписатьБезОбработки(Строка[Колонка.Имя]);
			ЗаписьJSON.ЗаписатьБезОбработки("""");
			
			Если ВыводительРазделитель = Неопределено Тогда
			    ВыводительРазделитель  = Истина;
			КонецЕсли;  
			
		КонецЦикла; 
		
		ЗаписьJSON.ЗаписатьБезОбработки("} ");
		ЗаписьJSON.ЗаписатьБезОбработки(Строка(Формат(Строка["ЗначениеМетрики"],"ЧРГ=; ЧН=; ЧГ=")));
		ЗаписьJSON.ЗаписатьБезОбработки(Символы.ПС);
		
	КонецЦикла;
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

//Проверка строчных данных на соответствие шаблону Prometheus
Функция СтрокаСоответствуетШаблону(Строка) Экспорт
	
	Фасет = "[a-zA-Z]([a-zA-Z0-9_:])*";
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + Фасет + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции


//Функция проверки корректности заполнения алгоритма в элементе справочника "Метрики" (кнопка Тест)
Функция ПроверитьАлгоритмРасчетаМетрики(Ссылка, ИмяМетрики, ТипМетрики, АлгоритмПолучения) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка",Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки","");
	СтруктураВозврата.Вставить("Результат","");
	
	Ошибка = Ложь;
	ОписаниеОшибки = "Расчет метрики завершен с ошибкой:" + Символы.ПС;
	
	ОписаниеОшибкиРасчета = "";
	ТаблицаЗначений = ВыполнитьАлгоритмРасчетаМетрики(АлгоритмПолучения, ОписаниеОшибкиРасчета);
	
	Если ЗначениеЗаполнено(ОписаниеОшибкиРасчета) Тогда
		СтруктураВозврата.Ошибка = Истина;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки + ОписаниеОшибкиРасчета;	
		Возврат СтруктураВозврата;
	КонецЕсли; 
	    	
	Если НЕ ТипЗнч(ТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
		СтруктураВозврата.Ошибка = Истина;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки + "Неверный тип выходного параметра. Ожидается тип ""Таблица значений""";
		Возврат СтруктураВозврата;
	КонецЕсли;
	      	
	Колонки = ТаблицаЗначений.Колонки;
	
	Если Колонки.Найти("ЗначениеМетрики") = Неопределено Тогда
		СтруктураВозврата.Ошибка = Истина;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки + "В выходной таблице отсутствует колонка ""ЗначениеМетрики""";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Колонки.Количество() < 2 И ТаблицаЗначений.Количество() > 1 Тогда
		СтруктураВозврата.Ошибка = Истина;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки + "В выходной таблице отсутствуют разделители (labels) при наличии более чем одной строки с данными метрик";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НЕ prРасчетМетрикPrometheusСервер.СтрокаСоответствуетШаблону(Колонка.Имя) И НЕ Колонка.Имя = "ЗначениеМетрики" Тогда
			СтруктураВозврата.Ошибка = Истина;
			СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки + "Имя колонки " +  Колонка.Имя + " не соответствует требуемому формату Prometheus. Требуемый формат: [a-zA-Z_:]([a-zA-Z0-9_:])*";
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтруктураВозврата.Ошибка Тогда
		Возврат СтруктураВозврата; 
	КонецЕсли; 
	       	
	МетрикаСтрокой = ПривестиТаблицуРасчетаМетрикиКСтрокеPrometheus(ИмяМетрики, ТипМетрики, ТаблицаЗначений);
	
	СтруктураВозврата.Результат = МетрикаСтрокой;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура prОтправитьМетрикиМетодомPUSH() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры
